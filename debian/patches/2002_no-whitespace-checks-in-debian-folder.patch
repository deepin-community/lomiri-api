Description: Support multiple ignore_prefix params in check_whitespace.py and ignore debian/ folder during unit tests.
Author: Mike Gabriel <mike.gabriel@das-netzwerkteam.de>

--- a/test/whitespace/CMakeLists.txt
+++ b/test/whitespace/CMakeLists.txt
@@ -2,4 +2,4 @@
 # Test that all source files, cmakefiles, etc. do not contain trailing whitespace.
 #
 
-add_test(whitespace ${CMAKE_CURRENT_SOURCE_DIR}/check_whitespace.py ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR})
+add_test(whitespace ${CMAKE_CURRENT_SOURCE_DIR}/check_whitespace.py ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/debian/)
--- a/test/whitespace/check_whitespace.py
+++ b/test/whitespace/check_whitespace.py
@@ -22,7 +22,7 @@
 # Little helper program to test that source files do not contain trailing whitespace
 # or tab indentation.
 #
-# Usage: check_whitespace.py directory [ignore_prefix]
+# Usage: check_whitespace.py directory [ignore_prefix [ignore_prefix [...]]]
 #
 # The directory specifies the (recursive) location of the source files. Any
 # files with a path that starts with ignore_prefix are not checked. This is
@@ -80,7 +80,7 @@
 
 parser = argparse.ArgumentParser(description = 'Test that source files do not contain trailing whitespace.')
 parser.add_argument('dir', nargs = 1, help = 'The directory to (recursively) search for source files')
-parser.add_argument('ignore_prefix', nargs = '?', default=None,
+parser.add_argument('ignore_prefix', nargs = '*', default=None,
                     help = 'Ignore source files with a path that starts with the given prefix.')
 args = parser.parse_args()
 
@@ -93,16 +93,25 @@
 # directory and check them for trailing whitespace.
 
 directory = os.path.abspath(args.dir[0])
-ignore = args.ignore_prefix and os.path.abspath(args.ignore_prefix) or None
+ignore_list = [ os.path.abspath(i_p) for i_p in args.ignore_prefix ]
 
 found_whitespace = False
 try:
     for root, dirs, files in os.walk(directory, onerror = raise_error):
         for file in files:
             path = os.path.join(root, file)
-            if not (ignore and path.startswith(ignore)) and pat.match(file):
-                if scan_for_bad_whitespace(path):
-                    found_whitespace = True
+
+            path_ignored = False
+
+            # ignore findings in ignored paths
+            for ignore in ignore_list:
+                if path.startswith(ignore):
+                    path_ignored = True
+
+            # detected white spaces
+            if not path_ignored and pat.match(file) and scan_for_bad_whitespace(path):
+                found_whitespace = True
+
 
 except OSError as e:
     error("cannot create file list for \"" + dir + "\": " + e.strerror)
